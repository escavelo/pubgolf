// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PubGolfServiceClient is the client API for PubGolfService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PubGolfServiceClient interface {
	// ClientVersion indicates to the server that a client of a given version is attempting to connect, and allows the server to respond with a "soft" or "hard" upgrade notification.
	ClientVersion(ctx context.Context, in *ClientVersionRequest, opts ...grpc.CallOption) (*ClientVersionResponse, error)
}

type pubGolfServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPubGolfServiceClient(cc grpc.ClientConnInterface) PubGolfServiceClient {
	return &pubGolfServiceClient{cc}
}

func (c *pubGolfServiceClient) ClientVersion(ctx context.Context, in *ClientVersionRequest, opts ...grpc.CallOption) (*ClientVersionResponse, error) {
	out := new(ClientVersionResponse)
	err := c.cc.Invoke(ctx, "/api.PubGolfService/ClientVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PubGolfServiceServer is the server API for PubGolfService service.
// All implementations should embed UnimplementedPubGolfServiceServer
// for forward compatibility
type PubGolfServiceServer interface {
	// ClientVersion indicates to the server that a client of a given version is attempting to connect, and allows the server to respond with a "soft" or "hard" upgrade notification.
	ClientVersion(context.Context, *ClientVersionRequest) (*ClientVersionResponse, error)
}

// UnimplementedPubGolfServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPubGolfServiceServer struct {
}

func (UnimplementedPubGolfServiceServer) ClientVersion(context.Context, *ClientVersionRequest) (*ClientVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientVersion not implemented")
}

// UnsafePubGolfServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PubGolfServiceServer will
// result in compilation errors.
type UnsafePubGolfServiceServer interface {
	mustEmbedUnimplementedPubGolfServiceServer()
}

func RegisterPubGolfServiceServer(s grpc.ServiceRegistrar, srv PubGolfServiceServer) {
	s.RegisterService(&PubGolfService_ServiceDesc, srv)
}

func _PubGolfService_ClientVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubGolfServiceServer).ClientVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PubGolfService/ClientVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubGolfServiceServer).ClientVersion(ctx, req.(*ClientVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PubGolfService_ServiceDesc is the grpc.ServiceDesc for PubGolfService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PubGolfService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.PubGolfService",
	HandlerType: (*PubGolfServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientVersion",
			Handler:    _PubGolfService_ClientVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/pubgolf.proto",
}
