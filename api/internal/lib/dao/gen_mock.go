// Code generated by mockery v2.16.0. DO NOT EDIT.

package dao

import (
	context "context"

	models "github.com/pubgolf/pubgolf/api/internal/lib/models"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockQueryProvider is an autogenerated mock type for the QueryProvider type
type MockQueryProvider struct {
	mock.Mock
}

// EventIDByKey provides a mock function with given fields: ctx, key
func (_m *MockQueryProvider) EventIDByKey(ctx context.Context, key string) (models.EventID, error) {
	ret := _m.Called(ctx, key)

	var r0 models.EventID
	if rf, ok := ret.Get(0).(func(context.Context, string) models.EventID); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(models.EventID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventPlayers provides a mock function with given fields: ctx, eventID
func (_m *MockQueryProvider) EventPlayers(ctx context.Context, eventID models.EventID) ([]models.Player, error) {
	ret := _m.Called(ctx, eventID)

	var r0 []models.Player
	if rf, ok := ret.Get(0).(func(context.Context, models.EventID) []models.Player); ok {
		r0 = rf(ctx, eventID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Player)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.EventID) error); ok {
		r1 = rf(ctx, eventID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventSchedule provides a mock function with given fields: ctx, eventID
func (_m *MockQueryProvider) EventSchedule(ctx context.Context, eventID models.EventID) ([]VenueStop, error) {
	ret := _m.Called(ctx, eventID)

	var r0 []VenueStop
	if rf, ok := ret.Get(0).(func(context.Context, models.EventID) []VenueStop); ok {
		r0 = rf(ctx, eventID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]VenueStop)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.EventID) error); ok {
		r1 = rf(ctx, eventID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventStartTime provides a mock function with given fields: ctx, id
func (_m *MockQueryProvider) EventStartTime(ctx context.Context, id models.EventID) (time.Time, error) {
	ret := _m.Called(ctx, id)

	var r0 time.Time
	if rf, ok := ret.Get(0).(func(context.Context, models.EventID) time.Time); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.EventID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertPlayer provides a mock function with given fields: ctx, eventID, player
func (_m *MockQueryProvider) UpsertPlayer(ctx context.Context, eventID models.EventID, player models.PlayerParams) (models.PlayerID, error) {
	ret := _m.Called(ctx, eventID, player)

	var r0 models.PlayerID
	if rf, ok := ret.Get(0).(func(context.Context, models.EventID, models.PlayerParams) models.PlayerID); ok {
		r0 = rf(ctx, eventID, player)
	} else {
		r0 = ret.Get(0).(models.PlayerID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.EventID, models.PlayerParams) error); ok {
		r1 = rf(ctx, eventID, player)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VenueByKey provides a mock function with given fields: ctx, eventID, venueKey
func (_m *MockQueryProvider) VenueByKey(ctx context.Context, eventID models.EventID, venueKey models.VenueKey) (Venue, error) {
	ret := _m.Called(ctx, eventID, venueKey)

	var r0 Venue
	if rf, ok := ret.Get(0).(func(context.Context, models.EventID, models.VenueKey) Venue); ok {
		r0 = rf(ctx, eventID, venueKey)
	} else {
		r0 = ret.Get(0).(Venue)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.EventID, models.VenueKey) error); ok {
		r1 = rf(ctx, eventID, venueKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockQueryProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockQueryProvider creates a new instance of MockQueryProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockQueryProvider(t mockConstructorTestingTNewMockQueryProvider) *MockQueryProvider {
	mock := &MockQueryProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
