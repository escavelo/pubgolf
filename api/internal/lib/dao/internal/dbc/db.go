// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2

package dbc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createPlayerStmt, err = db.PrepareContext(ctx, createPlayer); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePlayer: %w", err)
	}
	if q.eventCacheVersionByHashStmt, err = db.PrepareContext(ctx, eventCacheVersionByHash); err != nil {
		return nil, fmt.Errorf("error preparing query EventCacheVersionByHash: %w", err)
	}
	if q.eventIDByKeyStmt, err = db.PrepareContext(ctx, eventIDByKey); err != nil {
		return nil, fmt.Errorf("error preparing query EventIDByKey: %w", err)
	}
	if q.eventPlayersStmt, err = db.PrepareContext(ctx, eventPlayers); err != nil {
		return nil, fmt.Errorf("error preparing query EventPlayers: %w", err)
	}
	if q.eventScheduleStmt, err = db.PrepareContext(ctx, eventSchedule); err != nil {
		return nil, fmt.Errorf("error preparing query EventSchedule: %w", err)
	}
	if q.eventStartTimeStmt, err = db.PrepareContext(ctx, eventStartTime); err != nil {
		return nil, fmt.Errorf("error preparing query EventStartTime: %w", err)
	}
	if q.eventVenueKeysAreValidStmt, err = db.PrepareContext(ctx, eventVenueKeysAreValid); err != nil {
		return nil, fmt.Errorf("error preparing query EventVenueKeysAreValid: %w", err)
	}
	if q.setEventCacheKeysStmt, err = db.PrepareContext(ctx, setEventCacheKeys); err != nil {
		return nil, fmt.Errorf("error preparing query SetEventCacheKeys: %w", err)
	}
	if q.setEventVenueKeysStmt, err = db.PrepareContext(ctx, setEventVenueKeys); err != nil {
		return nil, fmt.Errorf("error preparing query SetEventVenueKeys: %w", err)
	}
	if q.setNextEventVenueKeyStmt, err = db.PrepareContext(ctx, setNextEventVenueKey); err != nil {
		return nil, fmt.Errorf("error preparing query SetNextEventVenueKey: %w", err)
	}
	if q.updatePlayerStmt, err = db.PrepareContext(ctx, updatePlayer); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePlayer: %w", err)
	}
	if q.venueByKeyStmt, err = db.PrepareContext(ctx, venueByKey); err != nil {
		return nil, fmt.Errorf("error preparing query VenueByKey: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createPlayerStmt != nil {
		if cerr := q.createPlayerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPlayerStmt: %w", cerr)
		}
	}
	if q.eventCacheVersionByHashStmt != nil {
		if cerr := q.eventCacheVersionByHashStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing eventCacheVersionByHashStmt: %w", cerr)
		}
	}
	if q.eventIDByKeyStmt != nil {
		if cerr := q.eventIDByKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing eventIDByKeyStmt: %w", cerr)
		}
	}
	if q.eventPlayersStmt != nil {
		if cerr := q.eventPlayersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing eventPlayersStmt: %w", cerr)
		}
	}
	if q.eventScheduleStmt != nil {
		if cerr := q.eventScheduleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing eventScheduleStmt: %w", cerr)
		}
	}
	if q.eventStartTimeStmt != nil {
		if cerr := q.eventStartTimeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing eventStartTimeStmt: %w", cerr)
		}
	}
	if q.eventVenueKeysAreValidStmt != nil {
		if cerr := q.eventVenueKeysAreValidStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing eventVenueKeysAreValidStmt: %w", cerr)
		}
	}
	if q.setEventCacheKeysStmt != nil {
		if cerr := q.setEventCacheKeysStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setEventCacheKeysStmt: %w", cerr)
		}
	}
	if q.setEventVenueKeysStmt != nil {
		if cerr := q.setEventVenueKeysStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setEventVenueKeysStmt: %w", cerr)
		}
	}
	if q.setNextEventVenueKeyStmt != nil {
		if cerr := q.setNextEventVenueKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setNextEventVenueKeyStmt: %w", cerr)
		}
	}
	if q.updatePlayerStmt != nil {
		if cerr := q.updatePlayerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePlayerStmt: %w", cerr)
		}
	}
	if q.venueByKeyStmt != nil {
		if cerr := q.venueByKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing venueByKeyStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                          DBTX
	tx                          *sql.Tx
	createPlayerStmt            *sql.Stmt
	eventCacheVersionByHashStmt *sql.Stmt
	eventIDByKeyStmt            *sql.Stmt
	eventPlayersStmt            *sql.Stmt
	eventScheduleStmt           *sql.Stmt
	eventStartTimeStmt          *sql.Stmt
	eventVenueKeysAreValidStmt  *sql.Stmt
	setEventCacheKeysStmt       *sql.Stmt
	setEventVenueKeysStmt       *sql.Stmt
	setNextEventVenueKeyStmt    *sql.Stmt
	updatePlayerStmt            *sql.Stmt
	venueByKeyStmt              *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                          tx,
		tx:                          tx,
		createPlayerStmt:            q.createPlayerStmt,
		eventCacheVersionByHashStmt: q.eventCacheVersionByHashStmt,
		eventIDByKeyStmt:            q.eventIDByKeyStmt,
		eventPlayersStmt:            q.eventPlayersStmt,
		eventScheduleStmt:           q.eventScheduleStmt,
		eventStartTimeStmt:          q.eventStartTimeStmt,
		eventVenueKeysAreValidStmt:  q.eventVenueKeysAreValidStmt,
		setEventCacheKeysStmt:       q.setEventCacheKeysStmt,
		setEventVenueKeysStmt:       q.setEventVenueKeysStmt,
		setNextEventVenueKeyStmt:    q.setNextEventVenueKeyStmt,
		updatePlayerStmt:            q.updatePlayerStmt,
		venueByKeyStmt:              q.venueByKeyStmt,
	}
}
