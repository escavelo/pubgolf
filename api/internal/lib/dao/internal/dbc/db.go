// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2

package dbc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.adjustmentsByPlayerStageStmt, err = db.PrepareContext(ctx, adjustmentsByPlayerStage); err != nil {
		return nil, fmt.Errorf("error preparing query AdjustmentsByPlayerStage: %w", err)
	}
	if q.createAdjustmentStmt, err = db.PrepareContext(ctx, createAdjustment); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAdjustment: %w", err)
	}
	if q.createPlayerStmt, err = db.PrepareContext(ctx, createPlayer); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePlayer: %w", err)
	}
	if q.createScoreStmt, err = db.PrepareContext(ctx, createScore); err != nil {
		return nil, fmt.Errorf("error preparing query CreateScore: %w", err)
	}
	if q.deleteAdjustmentStmt, err = db.PrepareContext(ctx, deleteAdjustment); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAdjustment: %w", err)
	}
	if q.deleteAdjustmentsForPlayerStageStmt, err = db.PrepareContext(ctx, deleteAdjustmentsForPlayerStage); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAdjustmentsForPlayerStage: %w", err)
	}
	if q.deleteScoreForPlayerStageStmt, err = db.PrepareContext(ctx, deleteScoreForPlayerStage); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteScoreForPlayerStage: %w", err)
	}
	if q.eventAdjustmentsStmt, err = db.PrepareContext(ctx, eventAdjustments); err != nil {
		return nil, fmt.Errorf("error preparing query EventAdjustments: %w", err)
	}
	if q.eventCacheVersionByHashStmt, err = db.PrepareContext(ctx, eventCacheVersionByHash); err != nil {
		return nil, fmt.Errorf("error preparing query EventCacheVersionByHash: %w", err)
	}
	if q.eventIDByKeyStmt, err = db.PrepareContext(ctx, eventIDByKey); err != nil {
		return nil, fmt.Errorf("error preparing query EventIDByKey: %w", err)
	}
	if q.eventPlayersStmt, err = db.PrepareContext(ctx, eventPlayers); err != nil {
		return nil, fmt.Errorf("error preparing query EventPlayers: %w", err)
	}
	if q.eventScheduleStmt, err = db.PrepareContext(ctx, eventSchedule); err != nil {
		return nil, fmt.Errorf("error preparing query EventSchedule: %w", err)
	}
	if q.eventScheduleWithDetailsStmt, err = db.PrepareContext(ctx, eventScheduleWithDetails); err != nil {
		return nil, fmt.Errorf("error preparing query EventScheduleWithDetails: %w", err)
	}
	if q.eventScoresStmt, err = db.PrepareContext(ctx, eventScores); err != nil {
		return nil, fmt.Errorf("error preparing query EventScores: %w", err)
	}
	if q.eventStartTimeStmt, err = db.PrepareContext(ctx, eventStartTime); err != nil {
		return nil, fmt.Errorf("error preparing query EventStartTime: %w", err)
	}
	if q.eventVenueKeysAreValidStmt, err = db.PrepareContext(ctx, eventVenueKeysAreValid); err != nil {
		return nil, fmt.Errorf("error preparing query EventVenueKeysAreValid: %w", err)
	}
	if q.playerAdjustmentsStmt, err = db.PrepareContext(ctx, playerAdjustments); err != nil {
		return nil, fmt.Errorf("error preparing query PlayerAdjustments: %w", err)
	}
	if q.playerScoresStmt, err = db.PrepareContext(ctx, playerScores); err != nil {
		return nil, fmt.Errorf("error preparing query PlayerScores: %w", err)
	}
	if q.scoreByPlayerStageStmt, err = db.PrepareContext(ctx, scoreByPlayerStage); err != nil {
		return nil, fmt.Errorf("error preparing query ScoreByPlayerStage: %w", err)
	}
	if q.scoringCriteriaAllVenuesStmt, err = db.PrepareContext(ctx, scoringCriteriaAllVenues); err != nil {
		return nil, fmt.Errorf("error preparing query ScoringCriteriaAllVenues: %w", err)
	}
	if q.scoringCriteriaEveryOtherVenueStmt, err = db.PrepareContext(ctx, scoringCriteriaEveryOtherVenue); err != nil {
		return nil, fmt.Errorf("error preparing query ScoringCriteriaEveryOtherVenue: %w", err)
	}
	if q.setEventCacheKeysStmt, err = db.PrepareContext(ctx, setEventCacheKeys); err != nil {
		return nil, fmt.Errorf("error preparing query SetEventCacheKeys: %w", err)
	}
	if q.setEventVenueKeysStmt, err = db.PrepareContext(ctx, setEventVenueKeys); err != nil {
		return nil, fmt.Errorf("error preparing query SetEventVenueKeys: %w", err)
	}
	if q.setNextEventVenueKeyStmt, err = db.PrepareContext(ctx, setNextEventVenueKey); err != nil {
		return nil, fmt.Errorf("error preparing query SetNextEventVenueKey: %w", err)
	}
	if q.updateAdjustmentStmt, err = db.PrepareContext(ctx, updateAdjustment); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAdjustment: %w", err)
	}
	if q.updatePlayerStmt, err = db.PrepareContext(ctx, updatePlayer); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePlayer: %w", err)
	}
	if q.updateScoreStmt, err = db.PrepareContext(ctx, updateScore); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateScore: %w", err)
	}
	if q.venueByKeyStmt, err = db.PrepareContext(ctx, venueByKey); err != nil {
		return nil, fmt.Errorf("error preparing query VenueByKey: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.adjustmentsByPlayerStageStmt != nil {
		if cerr := q.adjustmentsByPlayerStageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing adjustmentsByPlayerStageStmt: %w", cerr)
		}
	}
	if q.createAdjustmentStmt != nil {
		if cerr := q.createAdjustmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAdjustmentStmt: %w", cerr)
		}
	}
	if q.createPlayerStmt != nil {
		if cerr := q.createPlayerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPlayerStmt: %w", cerr)
		}
	}
	if q.createScoreStmt != nil {
		if cerr := q.createScoreStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createScoreStmt: %w", cerr)
		}
	}
	if q.deleteAdjustmentStmt != nil {
		if cerr := q.deleteAdjustmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAdjustmentStmt: %w", cerr)
		}
	}
	if q.deleteAdjustmentsForPlayerStageStmt != nil {
		if cerr := q.deleteAdjustmentsForPlayerStageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAdjustmentsForPlayerStageStmt: %w", cerr)
		}
	}
	if q.deleteScoreForPlayerStageStmt != nil {
		if cerr := q.deleteScoreForPlayerStageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteScoreForPlayerStageStmt: %w", cerr)
		}
	}
	if q.eventAdjustmentsStmt != nil {
		if cerr := q.eventAdjustmentsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing eventAdjustmentsStmt: %w", cerr)
		}
	}
	if q.eventCacheVersionByHashStmt != nil {
		if cerr := q.eventCacheVersionByHashStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing eventCacheVersionByHashStmt: %w", cerr)
		}
	}
	if q.eventIDByKeyStmt != nil {
		if cerr := q.eventIDByKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing eventIDByKeyStmt: %w", cerr)
		}
	}
	if q.eventPlayersStmt != nil {
		if cerr := q.eventPlayersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing eventPlayersStmt: %w", cerr)
		}
	}
	if q.eventScheduleStmt != nil {
		if cerr := q.eventScheduleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing eventScheduleStmt: %w", cerr)
		}
	}
	if q.eventScheduleWithDetailsStmt != nil {
		if cerr := q.eventScheduleWithDetailsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing eventScheduleWithDetailsStmt: %w", cerr)
		}
	}
	if q.eventScoresStmt != nil {
		if cerr := q.eventScoresStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing eventScoresStmt: %w", cerr)
		}
	}
	if q.eventStartTimeStmt != nil {
		if cerr := q.eventStartTimeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing eventStartTimeStmt: %w", cerr)
		}
	}
	if q.eventVenueKeysAreValidStmt != nil {
		if cerr := q.eventVenueKeysAreValidStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing eventVenueKeysAreValidStmt: %w", cerr)
		}
	}
	if q.playerAdjustmentsStmt != nil {
		if cerr := q.playerAdjustmentsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing playerAdjustmentsStmt: %w", cerr)
		}
	}
	if q.playerScoresStmt != nil {
		if cerr := q.playerScoresStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing playerScoresStmt: %w", cerr)
		}
	}
	if q.scoreByPlayerStageStmt != nil {
		if cerr := q.scoreByPlayerStageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing scoreByPlayerStageStmt: %w", cerr)
		}
	}
	if q.scoringCriteriaAllVenuesStmt != nil {
		if cerr := q.scoringCriteriaAllVenuesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing scoringCriteriaAllVenuesStmt: %w", cerr)
		}
	}
	if q.scoringCriteriaEveryOtherVenueStmt != nil {
		if cerr := q.scoringCriteriaEveryOtherVenueStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing scoringCriteriaEveryOtherVenueStmt: %w", cerr)
		}
	}
	if q.setEventCacheKeysStmt != nil {
		if cerr := q.setEventCacheKeysStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setEventCacheKeysStmt: %w", cerr)
		}
	}
	if q.setEventVenueKeysStmt != nil {
		if cerr := q.setEventVenueKeysStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setEventVenueKeysStmt: %w", cerr)
		}
	}
	if q.setNextEventVenueKeyStmt != nil {
		if cerr := q.setNextEventVenueKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setNextEventVenueKeyStmt: %w", cerr)
		}
	}
	if q.updateAdjustmentStmt != nil {
		if cerr := q.updateAdjustmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAdjustmentStmt: %w", cerr)
		}
	}
	if q.updatePlayerStmt != nil {
		if cerr := q.updatePlayerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePlayerStmt: %w", cerr)
		}
	}
	if q.updateScoreStmt != nil {
		if cerr := q.updateScoreStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateScoreStmt: %w", cerr)
		}
	}
	if q.venueByKeyStmt != nil {
		if cerr := q.venueByKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing venueByKeyStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                  DBTX
	tx                                  *sql.Tx
	adjustmentsByPlayerStageStmt        *sql.Stmt
	createAdjustmentStmt                *sql.Stmt
	createPlayerStmt                    *sql.Stmt
	createScoreStmt                     *sql.Stmt
	deleteAdjustmentStmt                *sql.Stmt
	deleteAdjustmentsForPlayerStageStmt *sql.Stmt
	deleteScoreForPlayerStageStmt       *sql.Stmt
	eventAdjustmentsStmt                *sql.Stmt
	eventCacheVersionByHashStmt         *sql.Stmt
	eventIDByKeyStmt                    *sql.Stmt
	eventPlayersStmt                    *sql.Stmt
	eventScheduleStmt                   *sql.Stmt
	eventScheduleWithDetailsStmt        *sql.Stmt
	eventScoresStmt                     *sql.Stmt
	eventStartTimeStmt                  *sql.Stmt
	eventVenueKeysAreValidStmt          *sql.Stmt
	playerAdjustmentsStmt               *sql.Stmt
	playerScoresStmt                    *sql.Stmt
	scoreByPlayerStageStmt              *sql.Stmt
	scoringCriteriaAllVenuesStmt        *sql.Stmt
	scoringCriteriaEveryOtherVenueStmt  *sql.Stmt
	setEventCacheKeysStmt               *sql.Stmt
	setEventVenueKeysStmt               *sql.Stmt
	setNextEventVenueKeyStmt            *sql.Stmt
	updateAdjustmentStmt                *sql.Stmt
	updatePlayerStmt                    *sql.Stmt
	updateScoreStmt                     *sql.Stmt
	venueByKeyStmt                      *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                  tx,
		tx:                                  tx,
		adjustmentsByPlayerStageStmt:        q.adjustmentsByPlayerStageStmt,
		createAdjustmentStmt:                q.createAdjustmentStmt,
		createPlayerStmt:                    q.createPlayerStmt,
		createScoreStmt:                     q.createScoreStmt,
		deleteAdjustmentStmt:                q.deleteAdjustmentStmt,
		deleteAdjustmentsForPlayerStageStmt: q.deleteAdjustmentsForPlayerStageStmt,
		deleteScoreForPlayerStageStmt:       q.deleteScoreForPlayerStageStmt,
		eventAdjustmentsStmt:                q.eventAdjustmentsStmt,
		eventCacheVersionByHashStmt:         q.eventCacheVersionByHashStmt,
		eventIDByKeyStmt:                    q.eventIDByKeyStmt,
		eventPlayersStmt:                    q.eventPlayersStmt,
		eventScheduleStmt:                   q.eventScheduleStmt,
		eventScheduleWithDetailsStmt:        q.eventScheduleWithDetailsStmt,
		eventScoresStmt:                     q.eventScoresStmt,
		eventStartTimeStmt:                  q.eventStartTimeStmt,
		eventVenueKeysAreValidStmt:          q.eventVenueKeysAreValidStmt,
		playerAdjustmentsStmt:               q.playerAdjustmentsStmt,
		playerScoresStmt:                    q.playerScoresStmt,
		scoreByPlayerStageStmt:              q.scoreByPlayerStageStmt,
		scoringCriteriaAllVenuesStmt:        q.scoringCriteriaAllVenuesStmt,
		scoringCriteriaEveryOtherVenueStmt:  q.scoringCriteriaEveryOtherVenueStmt,
		setEventCacheKeysStmt:               q.setEventCacheKeysStmt,
		setEventVenueKeysStmt:               q.setEventVenueKeysStmt,
		setNextEventVenueKeyStmt:            q.setNextEventVenueKeyStmt,
		updateAdjustmentStmt:                q.updateAdjustmentStmt,
		updatePlayerStmt:                    q.updatePlayerStmt,
		updateScoreStmt:                     q.updateScoreStmt,
		venueByKeyStmt:                      q.venueByKeyStmt,
	}
}
