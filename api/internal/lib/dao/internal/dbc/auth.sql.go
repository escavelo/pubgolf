// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: auth.sql

package dbc

import (
	"context"

	"github.com/pubgolf/pubgolf/api/internal/lib/models"
)

const deactivateAuthTokens = `-- name: DeactivateAuthTokens :one
UPDATE
  auth_tokens at
SET
  deleted_at = now()
WHERE
  at.deleted_at IS NULL
  AND at.player_id =(
    SELECT
      p.id
    FROM
      players p
    WHERE
      p.deleted_at IS NULL
      AND p.phone_number = $1)
RETURNING
  TRUE AS did_update
`

func (q *Queries) DeactivateAuthTokens(ctx context.Context, phoneNumber models.PhoneNum) (bool, error) {
	row := q.queryRow(ctx, q.deactivateAuthTokensStmt, deactivateAuthTokens, phoneNumber)
	var did_update bool
	err := row.Scan(&did_update)
	return did_update, err
}

const generateAuthToken = `-- name: GenerateAuthToken :one
INSERT INTO auth_tokens(player_id)
SELECT
  id
FROM
  players
WHERE
  phone_number = $1
RETURNING
  player_id,
  id AS auth_token
`

type GenerateAuthTokenRow struct {
	PlayerID  models.PlayerID
	AuthToken models.AuthToken
}

func (q *Queries) GenerateAuthToken(ctx context.Context, phoneNumber models.PhoneNum) (GenerateAuthTokenRow, error) {
	row := q.queryRow(ctx, q.generateAuthTokenStmt, generateAuthToken, phoneNumber)
	var i GenerateAuthTokenRow
	err := row.Scan(&i.PlayerID, &i.AuthToken)
	return i, err
}

const playerIDByAuthToken = `-- name: PlayerIDByAuthToken :one
SELECT
  p.id
FROM
  players p
  JOIN auth_tokens at ON p.id = at.player_id
WHERE
  p.deleted_at IS NULL
  AND at.deleted_at IS NULL
  AND at.id = $1
`

func (q *Queries) PlayerIDByAuthToken(ctx context.Context, authToken models.AuthToken) (models.PlayerID, error) {
	row := q.queryRow(ctx, q.playerIDByAuthTokenStmt, playerIDByAuthToken, authToken)
	var id models.PlayerID
	err := row.Scan(&id)
	return id, err
}
