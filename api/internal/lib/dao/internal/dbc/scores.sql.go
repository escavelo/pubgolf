// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: scores.sql

package dbc

import (
	"context"

	"github.com/pubgolf/pubgolf/api/internal/lib/models"
)

const adjustmentsByPlayerStage = `-- name: AdjustmentsByPlayerStage :many
SELECT
  id,
  label,
  value
FROM
  adjustments
WHERE
  stage_id = $1
  AND player_id = $2
  AND deleted_at IS NULL
`

type AdjustmentsByPlayerStageParams struct {
	StageID  models.StageID
	PlayerID models.PlayerID
}

type AdjustmentsByPlayerStageRow struct {
	ID    models.AdjustmentID
	Label string
	Value int32
}

func (q *Queries) AdjustmentsByPlayerStage(ctx context.Context, arg AdjustmentsByPlayerStageParams) ([]AdjustmentsByPlayerStageRow, error) {
	rows, err := q.query(ctx, q.adjustmentsByPlayerStageStmt, adjustmentsByPlayerStage, arg.StageID, arg.PlayerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdjustmentsByPlayerStageRow
	for rows.Next() {
		var i AdjustmentsByPlayerStageRow
		if err := rows.Scan(&i.ID, &i.Label, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createAdjustment = `-- name: CreateAdjustment :exec
INSERT INTO adjustments(stage_id, player_id, label, value)
  VALUES ($1, $2, $3, $4)
`

type CreateAdjustmentParams struct {
	StageID  models.StageID
	PlayerID models.PlayerID
	Label    string
	Value    int32
}

func (q *Queries) CreateAdjustment(ctx context.Context, arg CreateAdjustmentParams) error {
	_, err := q.exec(ctx, q.createAdjustmentStmt, createAdjustment,
		arg.StageID,
		arg.PlayerID,
		arg.Label,
		arg.Value,
	)
	return err
}

const createScore = `-- name: CreateScore :exec
INSERT INTO scores(stage_id, player_id, value, updated_at)
  VALUES ($1, $2, $3, now())
`

type CreateScoreParams struct {
	StageID  models.StageID
	PlayerID models.PlayerID
	Value    uint32
}

func (q *Queries) CreateScore(ctx context.Context, arg CreateScoreParams) error {
	_, err := q.exec(ctx, q.createScoreStmt, createScore, arg.StageID, arg.PlayerID, arg.Value)
	return err
}

const scoreByPlayerStage = `-- name: ScoreByPlayerStage :one
SELECT
  id,
  value
FROM
  scores
WHERE
  stage_id = $1
  AND player_id = $2
  AND deleted_at IS NULL
`

type ScoreByPlayerStageParams struct {
	StageID  models.StageID
	PlayerID models.PlayerID
}

type ScoreByPlayerStageRow struct {
	ID    models.ScoreID
	Value uint32
}

func (q *Queries) ScoreByPlayerStage(ctx context.Context, arg ScoreByPlayerStageParams) (ScoreByPlayerStageRow, error) {
	row := q.queryRow(ctx, q.scoreByPlayerStageStmt, scoreByPlayerStage, arg.StageID, arg.PlayerID)
	var i ScoreByPlayerStageRow
	err := row.Scan(&i.ID, &i.Value)
	return i, err
}
