// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: players.sql

package dbc

import (
	"context"

	"github.com/pubgolf/pubgolf/api/internal/lib/models"
)

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO players(event_id, name, scoring_category)
  VALUES ($1, $2, $3)
ON CONFLICT (event_id, name)
  DO UPDATE SET
    updated_at = now()
  RETURNING
    id
`

type CreatePlayerParams struct {
	EventID         models.EventID
	Name            string
	ScoringCategory models.NullScoringCategory
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (models.PlayerID, error) {
	row := q.queryRow(ctx, q.createPlayerStmt, createPlayer, arg.EventID, arg.Name, arg.ScoringCategory)
	var id models.PlayerID
	err := row.Scan(&id)
	return id, err
}

const eventPlayers = `-- name: EventPlayers :many
SELECT
  id,
  name,
  scoring_category
FROM
  players
WHERE
  event_id = $1
  AND deleted_at IS NULL
ORDER BY
  name ASC
`

type EventPlayersRow struct {
	ID              models.PlayerID
	Name            string
	ScoringCategory models.NullScoringCategory
}

func (q *Queries) EventPlayers(ctx context.Context, eventID models.EventID) ([]EventPlayersRow, error) {
	rows, err := q.query(ctx, q.eventPlayersStmt, eventPlayers, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EventPlayersRow
	for rows.Next() {
		var i EventPlayersRow
		if err := rows.Scan(&i.ID, &i.Name, &i.ScoringCategory); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
