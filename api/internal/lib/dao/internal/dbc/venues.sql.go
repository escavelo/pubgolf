// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: venues.sql

package dbc

import (
	"context"
	"database/sql"

	"github.com/pubgolf/pubgolf/api/internal/lib/models"
)

const allVenues = `-- name: AllVenues :many
SELECT
  v.id,
  v.name,
  v.address,
  v.image_url
FROM
  venues v
WHERE
  v.deleted_at IS NULL
ORDER BY
  v.name ASC
`

type AllVenuesRow struct {
	ID       models.VenueID
	Name     string
	Address  string
	ImageUrl sql.NullString
}

func (q *Queries) AllVenues(ctx context.Context) ([]AllVenuesRow, error) {
	rows, err := q.query(ctx, q.allVenuesStmt, allVenues)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AllVenuesRow
	for rows.Next() {
		var i AllVenuesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const stageIDByVenueKey = `-- name: StageIDByVenueKey :one
SELECT
  s.id
FROM
  stages s
WHERE
  s.deleted_at IS NULL
  AND s.event_id = $1
  AND s.venue_key = $2
`

type StageIDByVenueKeyParams struct {
	EventID  models.EventID
	VenueKey models.VenueKey
}

func (q *Queries) StageIDByVenueKey(ctx context.Context, arg StageIDByVenueKeyParams) (models.StageID, error) {
	row := q.queryRow(ctx, q.stageIDByVenueKeyStmt, stageIDByVenueKey, arg.EventID, arg.VenueKey)
	var id models.StageID
	err := row.Scan(&id)
	return id, err
}

const updateRuleByStage = `-- name: UpdateRuleByStage :exec
UPDATE
  rules r
SET
  description = $1
FROM
  stages s
WHERE
  r.id = s.rule_id
  AND s.id = $2
`

type UpdateRuleByStageParams struct {
	Description string
	StageID     models.StageID
}

func (q *Queries) UpdateRuleByStage(ctx context.Context, arg UpdateRuleByStageParams) error {
	_, err := q.exec(ctx, q.updateRuleByStageStmt, updateRuleByStage, arg.Description, arg.StageID)
	return err
}

const updateStage = `-- name: UpdateStage :exec
UPDATE
  stages s
SET
  venue_id = $1,
  rank = $2,
  duration_minutes = $3
WHERE
  s.id = $4
`

type UpdateStageParams struct {
	VenueID         models.VenueID
	Rank            int32
	DurationMinutes uint32
	ID              models.StageID
}

func (q *Queries) UpdateStage(ctx context.Context, arg UpdateStageParams) error {
	_, err := q.exec(ctx, q.updateStageStmt, updateStage,
		arg.VenueID,
		arg.Rank,
		arg.DurationMinutes,
		arg.ID,
	)
	return err
}

const venueByKey = `-- name: VenueByKey :one
SELECT
  v.id,
  v.name,
  v.address,
  v.image_url
FROM
  stages s
  JOIN venues v ON s.venue_id = v.id
WHERE
  s.deleted_at IS NULL
  AND s.event_id = $1
  AND s.venue_key = $2
  AND v.deleted_at IS NULL
`

type VenueByKeyParams struct {
	EventID  models.EventID
	VenueKey models.VenueKey
}

type VenueByKeyRow struct {
	ID       models.VenueID
	Name     string
	Address  string
	ImageUrl sql.NullString
}

func (q *Queries) VenueByKey(ctx context.Context, arg VenueByKeyParams) (VenueByKeyRow, error) {
	row := q.queryRow(ctx, q.venueByKeyStmt, venueByKey, arg.EventID, arg.VenueKey)
	var i VenueByKeyRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.ImageUrl,
	)
	return i, err
}
