// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: venues.sql

package dbc

import (
	"context"
	"database/sql"

	"github.com/pubgolf/pubgolf/api/internal/lib/models"
)

const stageIDByVenueKey = `-- name: StageIDByVenueKey :one
SELECT
  s.id
FROM
  stages s
WHERE
  s.deleted_at IS NULL
  AND s.event_id = $1
  AND s.venue_key = $2
`

type StageIDByVenueKeyParams struct {
	EventID  models.EventID
	VenueKey models.VenueKey
}

func (q *Queries) StageIDByVenueKey(ctx context.Context, arg StageIDByVenueKeyParams) (models.StageID, error) {
	row := q.queryRow(ctx, q.stageIDByVenueKeyStmt, stageIDByVenueKey, arg.EventID, arg.VenueKey)
	var id models.StageID
	err := row.Scan(&id)
	return id, err
}

const venueByKey = `-- name: VenueByKey :one
SELECT
  v.id,
  v.name,
  v.address,
  v.image_url
FROM
  stages s
  JOIN venues v ON s.venue_id = v.id
WHERE
  s.deleted_at IS NULL
  AND s.event_id = $1
  AND s.venue_key = $2
  AND v.deleted_at IS NULL
`

type VenueByKeyParams struct {
	EventID  models.EventID
	VenueKey models.VenueKey
}

type VenueByKeyRow struct {
	ID       models.VenueID
	Name     string
	Address  string
	ImageUrl sql.NullString
}

func (q *Queries) VenueByKey(ctx context.Context, arg VenueByKeyParams) (VenueByKeyRow, error) {
	row := q.queryRow(ctx, q.venueByKeyStmt, venueByKey, arg.EventID, arg.VenueKey)
	var i VenueByKeyRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.ImageUrl,
	)
	return i, err
}
