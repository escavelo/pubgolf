// PubGolf defines the app-facing API service for the in-game apps.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/pubgolf.proto

package apiv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/pubgolf/pubgolf/api/internal/lib/proto/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PubGolfServiceName is the fully-qualified name of the PubGolfService service.
	PubGolfServiceName = "api.v1.PubGolfService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PubGolfServiceClientVersionProcedure is the fully-qualified name of the PubGolfService's
	// ClientVersion RPC.
	PubGolfServiceClientVersionProcedure = "/api.v1.PubGolfService/ClientVersion"
	// PubGolfServiceGetScheduleProcedure is the fully-qualified name of the PubGolfService's
	// GetSchedule RPC.
	PubGolfServiceGetScheduleProcedure = "/api.v1.PubGolfService/GetSchedule"
	// PubGolfServiceGetVenueProcedure is the fully-qualified name of the PubGolfService's GetVenue RPC.
	PubGolfServiceGetVenueProcedure = "/api.v1.PubGolfService/GetVenue"
)

// PubGolfServiceClient is a client for the api.v1.PubGolfService service.
type PubGolfServiceClient interface {
	// ClientVersion indicates to the server that a client of a given version is attempting to connect, and allows the server to respond with a "soft" or "hard" upgrade notification.
	ClientVersion(context.Context, *connect_go.Request[v1.ClientVersionRequest]) (*connect_go.Response[v1.ClientVersionResponse], error)
	// GetSchedule returns the list of visble venues, as well as the next venue transition time. It optionally accepts a data version to allow local caching.
	GetSchedule(context.Context, *connect_go.Request[v1.GetScheduleRequest]) (*connect_go.Response[v1.GetScheduleResponse], error)
	// GetVenue performs a bulk lookup of venue metadata by ID. IDs are scoped to an event key.
	GetVenue(context.Context, *connect_go.Request[v1.GetVenueRequest]) (*connect_go.Response[v1.GetVenueResponse], error)
}

// NewPubGolfServiceClient constructs a client for the api.v1.PubGolfService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPubGolfServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PubGolfServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &pubGolfServiceClient{
		clientVersion: connect_go.NewClient[v1.ClientVersionRequest, v1.ClientVersionResponse](
			httpClient,
			baseURL+PubGolfServiceClientVersionProcedure,
			opts...,
		),
		getSchedule: connect_go.NewClient[v1.GetScheduleRequest, v1.GetScheduleResponse](
			httpClient,
			baseURL+PubGolfServiceGetScheduleProcedure,
			opts...,
		),
		getVenue: connect_go.NewClient[v1.GetVenueRequest, v1.GetVenueResponse](
			httpClient,
			baseURL+PubGolfServiceGetVenueProcedure,
			opts...,
		),
	}
}

// pubGolfServiceClient implements PubGolfServiceClient.
type pubGolfServiceClient struct {
	clientVersion *connect_go.Client[v1.ClientVersionRequest, v1.ClientVersionResponse]
	getSchedule   *connect_go.Client[v1.GetScheduleRequest, v1.GetScheduleResponse]
	getVenue      *connect_go.Client[v1.GetVenueRequest, v1.GetVenueResponse]
}

// ClientVersion calls api.v1.PubGolfService.ClientVersion.
func (c *pubGolfServiceClient) ClientVersion(ctx context.Context, req *connect_go.Request[v1.ClientVersionRequest]) (*connect_go.Response[v1.ClientVersionResponse], error) {
	return c.clientVersion.CallUnary(ctx, req)
}

// GetSchedule calls api.v1.PubGolfService.GetSchedule.
func (c *pubGolfServiceClient) GetSchedule(ctx context.Context, req *connect_go.Request[v1.GetScheduleRequest]) (*connect_go.Response[v1.GetScheduleResponse], error) {
	return c.getSchedule.CallUnary(ctx, req)
}

// GetVenue calls api.v1.PubGolfService.GetVenue.
func (c *pubGolfServiceClient) GetVenue(ctx context.Context, req *connect_go.Request[v1.GetVenueRequest]) (*connect_go.Response[v1.GetVenueResponse], error) {
	return c.getVenue.CallUnary(ctx, req)
}

// PubGolfServiceHandler is an implementation of the api.v1.PubGolfService service.
type PubGolfServiceHandler interface {
	// ClientVersion indicates to the server that a client of a given version is attempting to connect, and allows the server to respond with a "soft" or "hard" upgrade notification.
	ClientVersion(context.Context, *connect_go.Request[v1.ClientVersionRequest]) (*connect_go.Response[v1.ClientVersionResponse], error)
	// GetSchedule returns the list of visble venues, as well as the next venue transition time. It optionally accepts a data version to allow local caching.
	GetSchedule(context.Context, *connect_go.Request[v1.GetScheduleRequest]) (*connect_go.Response[v1.GetScheduleResponse], error)
	// GetVenue performs a bulk lookup of venue metadata by ID. IDs are scoped to an event key.
	GetVenue(context.Context, *connect_go.Request[v1.GetVenueRequest]) (*connect_go.Response[v1.GetVenueResponse], error)
}

// NewPubGolfServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPubGolfServiceHandler(svc PubGolfServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(PubGolfServiceClientVersionProcedure, connect_go.NewUnaryHandler(
		PubGolfServiceClientVersionProcedure,
		svc.ClientVersion,
		opts...,
	))
	mux.Handle(PubGolfServiceGetScheduleProcedure, connect_go.NewUnaryHandler(
		PubGolfServiceGetScheduleProcedure,
		svc.GetSchedule,
		opts...,
	))
	mux.Handle(PubGolfServiceGetVenueProcedure, connect_go.NewUnaryHandler(
		PubGolfServiceGetVenueProcedure,
		svc.GetVenue,
		opts...,
	))
	return "/api.v1.PubGolfService/", mux
}

// UnimplementedPubGolfServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPubGolfServiceHandler struct{}

func (UnimplementedPubGolfServiceHandler) ClientVersion(context.Context, *connect_go.Request[v1.ClientVersionRequest]) (*connect_go.Response[v1.ClientVersionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.PubGolfService.ClientVersion is not implemented"))
}

func (UnimplementedPubGolfServiceHandler) GetSchedule(context.Context, *connect_go.Request[v1.GetScheduleRequest]) (*connect_go.Response[v1.GetScheduleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.PubGolfService.GetSchedule is not implemented"))
}

func (UnimplementedPubGolfServiceHandler) GetVenue(context.Context, *connect_go.Request[v1.GetVenueRequest]) (*connect_go.Response[v1.GetVenueResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.PubGolfService.GetVenue is not implemented"))
}
