// PubGolf defines the app-facing API service for the in-game apps.

syntax = "proto3";

package api.v1;

import "api/v1/shared.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/pubgolf/pubgolf/api/internal/lib/proto/api/v1;apiv1";

// PubGolfService is the API server which handles all score keeping, scheduling and account management for pub golf.
service PubGolfService {
  // ClientVersion indicates to the server that a client of a given version is attempting to connect, and allows the server to respond with a "soft" or "hard" upgrade notification.
  rpc ClientVersion(ClientVersionRequest) returns (ClientVersionResponse) {}

  // Event

  // GetSchedule returns the list of visble venues, as well as the next venue transition time. It optionally accepts a data version to allow local caching.
  rpc GetSchedule(GetScheduleRequest) returns (GetScheduleResponse) {}

  // GetVenue performs a bulk lookup of venue metadata by ID. IDs are scoped to an event key.
  rpc GetVenue(GetVenueRequest) returns (GetVenueResponse) {}

  // ListContentItems
  rpc ListContentItems(ListContentItemsRequest) returns (ListContentItemsResponse) {}

  // GetContentItem
  rpc GetContentItem(GetContentItemRequest) returns (GetContentItemResponse) {}

  // Scoreboard

  // GetPlayerByName
  rpc GetPlayerByName(GetPlayerByNameRequest) returns (GetPlayerByNameResponse) {}

  // GetScoresForCategory
  rpc GetScoresForCategory(GetScoresForCategoryRequest) returns (GetScoresForCategoryResponse) {}

  // GetScoresForPlayer
  rpc GetScoresForPlayer(GetScoresForPlayerRequest) returns (GetScoresForPlayerResponse) {}

  // GetScoresForVenue
  rpc GetScoresForVenue(GetScoresForVenueRequest) returns (GetScoresForVenueResponse) {}
}

// ClientVersion

message ClientVersionRequest {
  uint32 client_version = 1;
}
message ClientVersionResponse {
  enum VersionStatus {
    VERSION_STATUS_UNSPECIFIED = 0;
    VERSION_STATUS_OK = 1;
    VERSION_STATUS_OUTDATED = 2;
    VERSION_STATUS_INCOMPATIBLE = 3;
  }
  VersionStatus version_status = 1;
}

// GetSchedule

message GetScheduleRequest {
  string event_key = 1;
  optional uint32 cached_data_version = 2;
}
message GetScheduleResponse {
  message Schedule {
    // List of past venues. Does not include the current venue.
    repeated uint32 visited_venue_keys = 1;
    // Optional in the case that the event hasn't started yet.
    optional uint32 current_venue_key = 2;
    // Optional in the case that the next venue isn't yet visible to players, or after the second to last venue. The next venue key only becomes visible X mins before the next venue's start time.
    optional uint32 next_venue_key = 3;
    optional google.protobuf.Timestamp next_venue_start = 4;
    google.protobuf.Timestamp event_end = 5;
  }

  uint32 latest_data_version = 1;
  optional Schedule schedule = 2;
}

// GetVenue

message GetVenueRequest {
  string event_key = 1;
  repeated uint32 venue_keys = 2;
}
message GetVenueResponse {
  message Venue {
    // Global ID for the venue in ULID format (26 characters, base32), not to be confused with the venue key.
    string id = 1;
    string name = 2;
    // Address string suitable for display or using for a mapping query.
    string address = 3;
    string image_url = 4;
  }

  // VenueWrapper allows us to return an empty wrapper in the case of an invalid or unauthorized venue ID.
  message VenueWrapper {
    optional Venue venue = 1;
  }

  // Map of requested venue keys to Venue objects.
  map<uint32, VenueWrapper> venues = 1;
}

message ListContentItemsRequest {
  string event_key = 1;
}
message ListContentItemsResponse {
  message ContentItemMetaData {
    string id = 1;
    string display_name = 2;
    // icon_key is an SF-Symbol name (e.g. "heart.fill").
    string icon_key = 3;
    Color icon_color = 4;
  }

  message Section {
    string display_name = 1;
    repeated ContentItemMetaData content_sections = 2;
    // icon_key is an SF-Symbol name (e.g. "heart.fill").
    string icon_key = 3;
    Color icon_color = 4;
  }

  repeated Section sections = 1;
}

message GetContentItemRequest {
  string id = 1;
}
message GetContentItemResponse {
  string id = 1;
  // content is in markdown format.
  string content = 2;
}

message GetPlayerByNameRequest {
  string event_key = 1;
  string player_name = 2;
}
message GetPlayerByNameResponse {
  Player player = 1;
}

message GetScoresForCategoryRequest {
  string event_key = 1;
  ScoringCategory category = 2;
}
message GetScoresForCategoryResponse {
  ScoreBoard scores = 1;
}

message GetScoresForPlayerRequest {
  string event_key = 1;
  string player_id = 2;
}
message GetScoresForPlayerResponse {
  ScoreBoard scores = 1;
}

message GetScoresForVenueRequest {
  string event_key = 1;
  string venue_id = 2;
}
message GetScoresForVenueResponse {
  ScoreBoard scores = 1;
}
