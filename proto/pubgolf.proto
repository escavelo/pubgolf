syntax = "proto3";

import "player.proto";
import "score.proto";
import "venue.proto";

package PubGolf;

service API {

  // Auth endpoints - accessible without auth token

  // Player accounts are per-event.
  rpc RegisterPlayer (RegisterPlayerRequest) returns (RegisterPlayerReply) {}
  rpc RequestPlayerLogin (RequestPlayerLoginRequest) returns (RequestPlayerLoginReply) {}
  rpc PlayerLogin (PlayerLoginRequest) returns (PlayerLoginReply) {}

  // Display endpoints - secured via auth token

  rpc GetSchedule (GetScheduleRequest) returns (GetScheduleReply) {}
  rpc GetScores (GetScoresRequest) returns (GetScoresReply) {}
  rpc GetScoresForPlayer (GetScoresForPlayerRequest) returns (GetScoresForPlayerReply) {}

  // User action endpoints - secured via auth token

  rpc CreateOrUpdateScore (CreateOrUpdateScoreRequest)
    returns (CreateOrUpdateScoreReply) {}
}

// Auth endpoints - accessible without auth token

message RegisterPlayerRequest {
  string event_key = 1;

  // In E.164 format: https://www.twilio.com/docs/glossary/what-e164
  string phone_number = 2;

  string name = 3;
  League league = 4;
}

message RegisterPlayerReply {}

message RequestPlayerLoginRequest {
  string event_key = 1;

  // In E.164 format: https://www.twilio.com/docs/glossary/what-e164
  string phone_number = 2;
}

message RequestPlayerLoginReply {}

message PlayerLoginRequest {
  string event_key = 1;

  // In E.164 format: https://www.twilio.com/docs/glossary/what-e164
  string phone_number = 2;

  uint32 auth_code = 3;
}

message PlayerLoginReply {
  string auth_token = 1;
  string player_id = 2;
  PlayerRole player_role = 3;
}

// Display endpoints - secured via auth token

message GetScheduleRequest {
  string event_key = 1;
}

message GetScheduleReply {
  VenueList venue_list = 1;
}

message GetScoresRequest {
  string event_key = 1;
}

message GetScoresReply {
  repeated ScoreList score_lists = 1;
}

message GetScoresForPlayerRequest {
  string event_key = 1;
  string player_id = 2;
}

message GetScoresForPlayerReply {
  repeated ScoreList score_lists = 1;
}

// User action endpoints - secured via auth token

message CreateOrUpdateScoreRequest {
  string venue_id = 1;
  string player_id = 2;
  int32 strokes = 3;

  // TODO: Figure out how to handle bonus and penalty. I think we can probably include this field in the proto, share it
  // across the player server and the admin server and just ignore it in the player-facing endpoints.
  // sint32 adjustments = 4;

  // TODO: Comments?
}

message CreateOrUpdateScoreReply {}
